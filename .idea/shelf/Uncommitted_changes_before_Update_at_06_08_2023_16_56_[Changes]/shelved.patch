Index: src/main/java/com/example/emotionalsongserver/HelloController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.emotionalsongserver;\r\nimport javafx.animation.PauseTransition;\r\nimport javafx.application.Application;\r\nimport javafx.application.Platform;\r\nimport javafx.concurrent.Task;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.chart.PieChart;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport java.sql.*;\r\nimport java.util.Objects;\r\nimport java.util.ResourceBundle;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\npublic class HelloController implements Initializable{\r\n    private final TextArea outputTextArea = new TextArea();\r\n    @FXML\r\n    public TextField GetIpAddress;\r\n    @FXML\r\n    public TextField GetPort;\r\n    @FXML\r\n    public TextField GetJdbcUrl;\r\n    @FXML\r\n    public  TextField GetPostgresUsername;\r\n    @FXML\r\n    public TextField GetPostgresPassword;\r\n    @FXML\r\n    public Label LogLabel;\r\n    @FXML\r\n    public Button StartButton;\r\n    @FXML\r\n    public ImageView GifImg;\r\n    @FXML\r\n    public ProgressBar progress;\r\n    @FXML\r\n    public CheckBox CBsave;\r\n\r\n    public String queryUtenti=\"CREATE TABLE utentiregistrati(id SERIAL PRIMARY KEY,nome VARCHAR,cognome VARCHAR,datanascita DATE,cfiscale VARCHAR(16),password VARCHAR)\";\r\n    public String queryCanzoni=\"CREATE TABLE canzoni(id VARCHAR PRIMARY KEY,titolo VARCHAR,autore VARCHAR,anno INT)\";\r\n    public String queryPlaylist=\"CREATE TABLE playlist(id SERIAL PRIMARY KEY,nome VARCHAR,possessore INT REFERENCES utentiregistrati(id))\";\r\n    public String queryEmozioni=\"CREATE TABLE emozioni(idplaylist int,idcanzone VARCHAR REFERENCES canzoni(id),Amazement int,Solemnity int,Tenderness int,Nostalgia int,Calmness int,Power int,Joy int,Tension int,Sadness int,Amazement_N VARCHAR,Solemnity_N VARCHAR,Tenderness_N VARCHAR,Nostalgia_N VARCHAR,Calmness_N VARCHAR,Power_N VARCHAR,Joy_N VARCHAR,Tension_N VARCHAR,Sadness_N VARCHAR,  PRIMARY KEY(idplaylist, idcanzone))\";\r\n\r\n    public void StartSocketServer() throws IOException {\r\n        String ipAddress = GetIpAddress.getText();\r\n        String PortNumber = GetPort.getText();\r\n        String url = \"jdbc:postgresql://\" + GetJdbcUrl.getText() + \"/\";\r\n        String usr = GetPostgresUsername.getText();\r\n        String pass = GetPostgresPassword.getText();\r\n        String dbname = \"db1\";\r\n        boolean db = DatabaseManager.CheckDatabase(url, usr, pass, dbname);\r\n        if ((ipAddress.length() == 0) || (PortNumber.length() == 0) || (url.length() == 0) || (usr.length() == 0) || (pass.length() == 0)) {\r\n            LogLabel.setText(\"error\");\r\n        } else {\r\n            if (CBsave.isSelected()){\r\n                FileWriter fw = new FileWriter(\"init.txt\");\r\n\r\n                String info = ipAddress+\"\\n\"+PortNumber+\"\\n\"+GetJdbcUrl.getText()+\"\\n\"+usr+\"\\n\"+pass;\r\n                fw.write(info);\r\n                fw.close();\r\n            }\r\n            if (!db) {\r\n\r\n\r\n                DatabaseManager.createDatabase(url, usr, pass, dbname);\r\n                DatabaseManager.createTable(url + dbname, usr, pass, queryCanzoni);\r\n                DatabaseManager.createTable(url + dbname, usr, pass, queryUtenti);\r\n                DatabaseManager.createTable(url + dbname, usr, pass, queryPlaylist);\r\n                DatabaseManager.createTable(url + dbname, usr, pass, queryEmozioni);\r\n                String urlKK = url + dbname;\r\n                Task<Void> task = new Task<Void>() {\r\n                    @Override\r\n                    protected Void call() throws Exception {\r\n                        DatabaseManager.LoadTable(urlKK, usr, pass, LogLabel);\r\n                        return null;}};\r\n                Thread thread = new Thread(task);\r\n\r\n                thread.start();\r\n\r\n            } else {\r\n                ServerManager.StopServer();\r\n                ServerManager.executor(ipAddress, Integer.parseInt(PortNumber), url, usr, pass);\r\n                LogLabel.setText(\"server online on ip address: \" + ipAddress + \" and port:\" + PortNumber);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public void StopServer(){\r\n        ServerManager.StopServer();\r\n        LogLabel.setText(\"server offline\");\r\n        progress.setVisible(false);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n        try{\r\n            BufferedReader br = new BufferedReader(new FileReader(\"init.txt\"));\r\n            GetIpAddress.setText(br.readLine());\r\n            GetPort.setText(br.readLine());\r\n            GetJdbcUrl.setText(br.readLine());\r\n            GetPostgresUsername.setText(br.readLine());\r\n            GetPostgresPassword.setText(br.readLine());\r\n\r\n        }catch (IOException e){}\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/emotionalsongserver/HelloController.java b/src/main/java/com/example/emotionalsongserver/HelloController.java
--- a/src/main/java/com/example/emotionalsongserver/HelloController.java	(revision 44bcefadeaf0263c4f293a516242a0e3a9d41be9)
+++ b/src/main/java/com/example/emotionalsongserver/HelloController.java	(date 1691331005587)
@@ -83,8 +83,8 @@
                         DatabaseManager.LoadTable(urlKK, usr, pass, LogLabel);
                         return null;}};
                 Thread thread = new Thread(task);
-
                 thread.start();
+                System.out.println("sgorbiodimerda");
 
             } else {
                 ServerManager.StopServer();
Index: src/main/java/com/example/emotionalsongserver/DatabaseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.emotionalsongserver;\r\n\r\nimport javafx.animation.PauseTransition;\r\nimport javafx.application.Platform;\r\nimport javafx.concurrent.Task;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ProgressBar;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.sql.*;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\n\r\npublic class  DatabaseManager extends HelloController{\r\n\r\n    public static void createTable(String url, String user, String password, String query) {\r\n        try {\r\n            // Connessione al database\r\n            Connection conn = DriverManager.getConnection(url, user, password);\r\n            // Creazione della tabella\r\n            Statement statement = conn.createStatement();\r\n            statement.executeUpdate(query);\r\n            statement.close();\r\n            // Chiude la connessione al database\r\n            conn.close();\r\n            System.out.println(\"Tabella creata con successo!\");\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Errore durante la creazione della tabella:\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public static void createDatabase(String url, String user, String password, String databaseName) {\r\n        try {\r\n            // Registra il driver JDBC per PostgreSQL\r\n            Class.forName(\"org.postgresql.Driver\");\r\n\r\n            // Connessione al database\r\n            Connection conn = DriverManager.getConnection(url, user, password);\r\n\r\n            // Creazione del database\r\n            String createDBQuery = \"CREATE DATABASE \" + databaseName;\r\n            Statement statement = conn.createStatement();\r\n            statement.executeUpdate(createDBQuery);\r\n            statement.close();\r\n\r\n            // Chiude la connessione al database\r\n            conn.close();\r\n\r\n            System.out.println(\"Database creato con successo!\");\r\n        } catch (ClassNotFoundException e) {\r\n            System.err.println(\"Driver JDBC non trovato. Assicurati di avere il driver PostgreSQL nel tuo classpath.\");\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Errore durante la creazione del database:\");\r\n            e.printStackTrace();\r\n        }}\r\n    public static boolean CheckDatabase(String url, String user, String password, String dbName ) {\r\n        try {\r\n            // Connessione al database\r\n            Connection connection = DriverManager.getConnection(url, user, password);\r\n            // Query per verificare se il database esiste già\r\n            String checkDbQuery = \"SELECT datname FROM pg_catalog.pg_database WHERE datname = '\" + dbName + \"';\";\r\n            Statement statement = connection.createStatement();\r\n            ResultSet resultSet = statement.executeQuery(checkDbQuery);\r\n            // Verifica se il database è già presente\r\n            if (resultSet.next()) {\r\n                System.out.println(\"Il database \" + dbName + \" esiste già.\");\r\n                return true;\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Errore durante la connessione al database: \" + e.getMessage());\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private static void open() {\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader(DatabaseManager.class.getResource(\"progressbar.fxml\"));\r\n            Parent root1;\r\n            Stage stage;\r\n            root1 = fxmlLoader.load();\r\n            stage = new Stage();\r\n            stage.setResizable(false);\r\n            stage.setScene(new Scene(root1));\r\n            stage.show();\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void LoadTable(String url, String user, String password, Label l) {\r\n\r\n\r\n        String s = Thread.currentThread().getName();\r\n        System.out.println(s);\r\n\r\n\r\n        try {\r\n            BufferedReader bw = new BufferedReader(new FileReader(\"canzoni.txt\"));\r\n            String line;\r\n            int i=0;\r\n            int perc = 0;\r\n            Connection conn = DriverManager.getConnection(url, user, password);\r\n            Statement stm = conn.createStatement();\r\n            System.out.println(perc+\"% completato\");\r\n            while ((line = bw.readLine())!=null){\r\n                String[] strpart = line.split(\"<SEP>\");\r\n                String anno  = strpart[0];\r\n                String id = strpart[1];\r\n                String canzone = strpart[2];\r\n                String artista = strpart[3];\r\n                String query = \"INSERT INTO canzoni VALUES('\"+id+\"', '\"+canzone+\"', '\"+artista+\"', \"+anno+\")\";\r\n                stm.executeUpdate(query);\r\n                i++;\r\n                if (i==5155){\r\n                    i=0;\r\n                    perc++;\r\n                    final int pprint = perc;\r\n                    System.out.println(perc+\"% completato\");\r\n                    Platform.runLater(() ->{\r\n                        l.setText(pprint+\"% completato\");\r\n                    });\r\n\r\n                }\r\n            }\r\n            System.out.println(\"Inserimento Completato\");\r\n            conn.close();\r\n        }catch (FileNotFoundException e){\r\n            System.err.println(\"File non trovato\");\r\n        }catch (Exception e){\r\n            System.err.println(e.toString());\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/emotionalsongserver/DatabaseManager.java b/src/main/java/com/example/emotionalsongserver/DatabaseManager.java
--- a/src/main/java/com/example/emotionalsongserver/DatabaseManager.java	(revision 44bcefadeaf0263c4f293a516242a0e3a9d41be9)
+++ b/src/main/java/com/example/emotionalsongserver/DatabaseManager.java	(date 1691331526245)
@@ -18,6 +18,7 @@
 import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.sql.*;
+import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
@@ -137,6 +138,7 @@
             }
             System.out.println("Inserimento Completato");
             conn.close();
+            Thread.currentThread().interrupt();
         }catch (FileNotFoundException e){
             System.err.println("File non trovato");
         }catch (Exception e){
Index: init.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>localhost\r\n5432\r\nlocalhost:5432\r\npostgres\r\npostgres
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/init.txt b/init.txt
--- a/init.txt	(revision 44bcefadeaf0263c4f293a516242a0e3a9d41be9)
+++ b/init.txt	(date 1691332697484)
@@ -1,5 +1,5 @@
 localhost
-5432
+8080
 localhost:5432
 postgres
 postgres
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9aca4913-0b6b-4f3d-bfcf-591d23812848\" name=\"Changes\" comment=\"sti merda di thread comunicano\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/emotionalsongserver/DatabaseManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/emotionalsongserver/DatabaseManager.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHome\" value=\"Use Maven wrapper\" />\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2TaCPTDp3uLA0wOrr8cxf3uP6YM\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;reference.settings.project.maven.importing&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\gabry\\Desktop\\EmotionalSong\" />\r\n      <recent name=\"C:\\Users\\gabry\\Desktop\\EmotionalSong\\src\\main\\java\\com\\example\\emotionalsongserver\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.com.example.emotionalsongserver.HelloApplication\">\r\n    <configuration name=\"HelloApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.oldclasses.HelloApplication\" />\r\n      <module name=\"ServerStart-EmotionalSong\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.oldclasses.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"com.example.emotionalsongserver.HelloApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.example.emotionalsongserver.HelloApplication\" />\r\n      <module name=\"ServerStart-EmotionalSong\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.example.emotionalsongserver.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <module name=\"EmotionalSong\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <module name=\"EmotionalSong\" />\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.com.example.emotionalsongserver.HelloApplication\" />\r\n        <item itemvalue=\"Application.HelloApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9aca4913-0b6b-4f3d-bfcf-591d23812848\" name=\"Changes\" comment=\"\" />\r\n      <created>1691271782556</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1691271782556</updated>\r\n      <workItem from=\"1691271786276\" duration=\"1192000\" />\r\n      <workItem from=\"1691272988974\" duration=\"2388000\" />\r\n      <workItem from=\"1691288750271\" duration=\"274000\" />\r\n      <workItem from=\"1691289787534\" duration=\"1018000\" />\r\n      <workItem from=\"1691316268683\" duration=\"158000\" />\r\n      <workItem from=\"1691317457648\" duration=\"21000\" />\r\n      <workItem from=\"1691317505661\" duration=\"4000\" />\r\n      <workItem from=\"1691317525080\" duration=\"3000\" />\r\n      <workItem from=\"1691318238176\" duration=\"22000\" />\r\n      <workItem from=\"1691318283835\" duration=\"4344000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1691320910711</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1691320910711</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1691320921505</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1691320921505</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1691322140024</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1691322140024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"sti merda di thread comunicano\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1691322181306</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1691322181306</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"1\" />\r\n    <MESSAGE value=\"sti merda di thread comunicano\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"sti merda di thread comunicano\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 44bcefadeaf0263c4f293a516242a0e3a9d41be9)
+++ b/.idea/workspace.xml	(date 1691333795716)
@@ -6,7 +6,9 @@
   <component name="ChangeListManager">
     <list default="true" id="9aca4913-0b6b-4f3d-bfcf-591d23812848" name="Changes" comment="sti merda di thread comunicano">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/init.txt" beforeDir="false" afterPath="$PROJECT_DIR$/init.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/emotionalsongserver/DatabaseManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/emotionalsongserver/DatabaseManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/emotionalsongserver/HelloController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/emotionalsongserver/HelloController.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -29,6 +31,7 @@
   </component>
   <component name="ProjectId" id="2TaCPTDp3uLA0wOrr8cxf3uP6YM" />
   <component name="ProjectLevelVcsManager">
+    <OptionsSetting value="false" id="Update" />
     <ConfirmationsSetting value="2" id="Add" />
   </component>
   <component name="ProjectViewState">
@@ -124,6 +127,7 @@
       <workItem from="1691317525080" duration="3000" />
       <workItem from="1691318238176" duration="22000" />
       <workItem from="1691318283835" duration="4344000" />
+      <workItem from="1691322843255" duration="5227000" />
     </task>
     <task id="LOCAL-00001" summary="1">
       <option name="closed" value="true" />
@@ -157,7 +161,15 @@
       <option name="project" value="LOCAL" />
       <updated>1691322181306</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="sti merda di thread comunicano">
+      <option name="closed" value="true" />
+      <created>1691322863630</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1691322863630</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
